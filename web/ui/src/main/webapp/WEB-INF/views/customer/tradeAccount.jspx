<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<div xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:jsp="http://java.sun.com/JSP/Page"
	xmlns:spring="http://www.springframework.org/tags" version="2.0">
	<jsp:directive.page contentType="text/html;charset=UTF-8" />
	<jsp:output omit-xml-declaration="yes" />
	
	<spring:url value="/customer/serviceinstance/account?serviceIdendify=" var="accountlist_url"/>
	<spring:url value="/customer/serviceinstance/account" var="deleteaccounts_url"/>
	
	<spring:url value="/customer/serviceinstance/account?serviceIdendify=" var="account_url"/>
	
	<script type="text/javascript">
		require(["dijit/layout/ContentPane","dijit/Dialog", "dijit/form/Form","dijit/form/ValidationTextBox","dijit/form/Button","dojox/form/PasswordValidator"]);
	

		dojo.addOnLoad(function(){
			require(["dojo/ready", "dijit/form/Button", "dojo/dom"], function(ready, Button, dom){
			    ready(function(){
			    	
			    	
			        var newButton = new Button({
			            label: "<spring:message code="button_create" />",
			            onClick: function(){
			            	var dialog = dijit.byId("newAccountDialog");
			            	dialog.show();
			            	//accountMemory.add({username:'',password:'',description:''});
			            }
			        }, "newAccountButton");
			        var delButton = new Button({
			            label: "<spring:message code="button_delete" />",
			            onClick: function(){
			            	//require([ 'dojo/_base/xhr',"dojo/dom-form" ], function(xhr,domForm) {
			            		dojo.forEach(accountGrid.selection.getSelected(),function(item){
				            		var xhrArgs = {
				            			url : "${deleteaccounts_url}/"+item.id,
				            			handleAs: "json",
				  				      	headers: { "Content-Type": "application/json","Accept": "application/json"},
										sync:true,
										load: function(){
											accountMemory.remove(item.id);
				            			},
				            			error: function(error,ioArgs){
									    	 require(["dojo/_base/connect"], function(connect){
												  connect.publish("resterror", [{
												    status:ioArgs.xhr.status,
												    message:dojo.toJson(error)
												  }]);
											});  
									    },
				            		}
				            		
				            		var deferred = dojo.xhrDelete(xhrArgs);
			            		});
			            	//});
			            }
			        }, "deleteAccountButton");
			        var createAccountButton = new Button({
			            label: "<spring:message code="button_save" />",
			            onClick: function(){
			            	
			            	require([ 'dojo/_base/xhr',"dojo/dom-form" ], function(xhr,domForm) {
			            		var account = dojo.formToObject("newAccountForm");
			            		xhr.post({
									url : "${account_url}"+<c:out value="${param.serviceIdendify}" />,
									headers: {
									    'accept': 'application/json'
									},
									handleAs : "json",
									postData: dojo.toJson(account),
									headers: { "Content-Type": "application/json","Accept": "application/json"},
									error: function(error,ioArgs){
								    	 require(["dojo/_base/connect"], function(connect){
											  connect.publish("resterror", [{
											    status:ioArgs.xhr.status,
											    message:dojo.toJson(error)
											  }]);
										});  
								    },
									load: function(data){
										account.id=Number(data);
										accountMemory.add(account);
										
										closeAccountDialog();	  
	    							}
								});
							});
			            	
			            }
			        }, "createAccountButton");
			        
			        
			        var updateAccountButton = new Button({
			            label: "<spring:message code="button_edit" />",
			            onClick: function(){
			            	
			            	require([ 'dojo/_base/xhr',"dojo/dom-form" ], function(xhr,domForm) {
			            		//var account = dojo.toJson(dojo.formToObject("newAccountForm"));
			            		xhr.put({
									url : "${account_url}"+<c:out value="${param.serviceIdendify}" />,
									headers: {
									    'accept': 'application/json'
									},
									handleAs : "json",
									postData: dojo.toJson(dojo.formToObject("newAccountForm")),
									headers: { "Content-Type": "application/json","Accept": "application/json"},
									error: function(error,ioArgs){
								    	 require(["dojo/_base/connect"], function(connect){
											  connect.publish("resterror", [{
											    status:ioArgs.xhr.status,
											    message:dojo.toJson(error)
											  }]);
										});  
								    },
									load: function(response, ioArgs){
										closeAccountDialog();	  
	    							}
								});
							});
			            	
			            }
			        }, "updateAccountButton");
			        
			        
			    });
			});
			
				
			
		});
		
		function closeAccountDialog(){
			var dialog = dijit.byId("newAccountDialog");
			//var accountListPane = dijit.byId("accountListPane");
			//accountListPane.refresh();
			
        	dialog.hide();	
		}
	</script>
	<button id="newAccountButton" type="button"><!-- ff --></button>
	<button id="deleteAccountButton" type="button"><!-- ff --></button>
	<!-- 
	<button id="updateAccountButton" type="button"></button>
	-->
	<div id="tradeAccountMessage"></div>
	<div id="accountListPane" style="width: 100%; height:200px" data-dojo-type="dijit.layout.ContentPane">
		<script type="dojo/method">
			dojo.addOnLoad(function(){
				
				var layout = [[
				 		      {'name': '账号', 'field': 'username', 'width': '40%',editable:false},
							  //{'name': '密码', 'field': 'password', 'width': '20%', editable: true, type: dojox.grid.cells._Widget, widgetProps: {type: "password"}},
				 		      {'name': '描述', 'field': 'description', 'width': '60%',editable:false}
				 		      
				]];
				require([ 'dojo/_base/xhr','dojo/store/Memory','dojo/data/ObjectStore','dojox/grid/DataGrid','dojo/store/Observable'], function(xhr,Memory,ObjectStore,DataGrid,Observable) {
					xhr.get({
						url : "${accountlist_url}"+<c:out value="${param.serviceIdendify}" />,
						headers: {
					    	'accept': 'application/json'
						},
						sync:true,
						handleAs : "json",
						load : function(accounts) {
							var index=1;
							dojo.forEach(accounts,function(account){
								account.index = index++;
							});
							
							accountMemory = new Memory({
								data : accounts,
								idProperty : "id"
							});
							accountMemory = new Observable(accountMemory);
							accountStore = new ObjectStore({
								objectStore : accountMemory,
								
							});
						    

							accountGrid = new DataGrid({
						        store: accountStore,
						        structure: layout,
								selectionMode:'single',
								style:"height:100%"},
						        document.createElement('div'));
							dojo.byId("accountListPane").appendChild(accountGrid.domNode);
							accountGrid.startup();	
						}
					
					});
				
				});

			});	
		</script>	
	
	</div>
	
	<div id="newAccountDialog" data-dojo-type="dijit/Dialog" title="" style="width: 300px; height: 300px;">
		<div data-dojo-type="dijit/form/Form" id="newAccountForm"
				data-dojo-id="newAccountForm" action="" method="">
			
			<label for="accountName" >账号:</label> 
  			<input type="text" id="accountName"
					name="username" required="true"
					data-dojo-type="dijit/form/ValidationTextBox"/> <br /> <br />	
  			
  			<div data-dojo-type="dojox/form/PasswordValidator" name="password">
  		  		<label >密码:</label>
		  		<input type="password" pwType="new" /><br/><br/>
		  		<label >请再次输入密码:</label>
		  		<input type="password" pwType="verify" /><br/><br/>
			</div>
			<label>描述:</label> 
			<input type="text" id="accountDesc"
							name="description"
							data-dojo-type="dijit/form/ValidationTextBox" /> <br /> <br />
							
			<input type="hidden" id="accountid"
							name="id"/>
		</div>
		<button id="createAccountButton" type="button"><!-- ff --></button>	
	</div>
	
</div>
